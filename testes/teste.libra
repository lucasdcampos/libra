// Testando diversas funcionalidades para ver se nada foi quebrado

exibir("Iniciando teste de funcionalidades da Libra:")

exibir("Testando Variáveis")
var x: Objeto = 1
var texto = "Olá, Mundo!"
var y = 2
x = y
x = x+1

exibir("Testando Constantes")
const QIDoLucas = 9999

exibir("Testando Vetores")
var vetor = { 1, 2, 3 }
vetor = [10]
vetor[0] = 1
vetor = {}
vetor = []

exibir("Testando Expressões")
x = (1+2)*3
x = !x
x = -x
x = 1 > 0 ou 1 >= 0 ou x < 0 ou x <= 0 ou x == 0 e x == 69

exibir("Testando Expressões Especiais")
x = 0b1111
x = 0xCAFE


exibir("Testando Tipos em Expressões")
var str = "ola"
str = str + 1
str = str + "mundo"
str = str + 6.9
var decimal = 1.0
decimal = decimal + 1
decimal = decimal + 0.1
decimal = -decimal

exibir("Testando Condicionais")
x = 1
se x > 0 entao
    exibir("    `se` funcionando")
senao se x < 0 entao
    erro("    Algo deu errado com `senao se`")
senao // x == 0
    erro("    Algo deu errado com `senao`")
fim

x = -1
se x > 0 entao
    erro("    Algo deu errado com `se`")
senao se x < 0 entao
    exibir("    `senao se` funcionando")
senao // x == 0
    erro("    Algo deu errado com `senao`")
fim

x = 0
se x > 0 entao
    erro("    Algo deu errado com `se`")
senao se x < 0 entao
    erro("    Algo deu errado com `senao se`")
senao // x == 0
    exibir("    `senao` funcionando")
fim

exibir("Testando Loops")
var n = 0
enquanto n < 3 faca
    n = n + 1
fim
n = 0

enquanto n < 3 faca
    se n == 1 entao
        romper
    fim
    n = n+1
fim
se n != 1 entao
    erro("Erro com instrução romper! n = " + texto(n) + " ao invés de 1")
fim
exibir("Testando Funções")
funcao foo(bar)
    retornar bar
fim

var testeArgumento = 69
se foo(testeArgumento) != testeArgumento entao
    erro("Problema detectado no Retorno de Funções ou Passagem de Argumentos!")
fim

exibir("Testando Funções Nativas")
texto(1)
texto(1.0)
int(1)
int(1.0)
int("1")
real(1)
real(1.0)
real("1.0")
real("1")
bytes(int)
tamanho("abc")
tipo(int)

exibir("Testando Recursividade")
funcao testarPot(b, n)
    se n == 0 entao
        retornar 1
    fim
    retornar b * testarPot(b, n-1)
fim
x = testarPot(2,3)

exibir("Testando Importação de Arquivos e Biblioteca Padrão")

exibir("    Importando so.libra")
importar "so.libra"

exibir("    Importando matematica.libra")
importar "matematica.libra"

exibir("    Importando vetores.libra")
importar "vetores.libra"

exibir("    Importando utilidades.libra")
importar "utilidades.libra"

exibir("Testando algumas funções das bibliotecas")
exibir("    Testando funções matemáticas")
se raizq(64) != 8 entao
    erro("        Problema com a função raizq(): raizq(64) = " + texto(raizq(64)))
fim

exibir("    Testando algumas funções de vetores:")

var testeVetor = {1,2,3}
exibir("        Testando reverter()")
testeVetor = reverter(testeVetor)

exibir("        Testando incluir()")
testeVetor = incluir(testeVetor, 1)

exibir("Fim do Teste, nenhum problema fatal encontrado.")

exibir("Saindo")
sair(69)