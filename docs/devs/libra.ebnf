programa                ::= instrucao*

instrucao               ::= inst_decl_var
                          | inst_decl_func
                          | inst_decl_tipo
                          | inst_atrib_var
                          | inst_se
                          | inst_enquanto
                          | inst_romper
                          | inst_continuar
                          | inst_retornar
                          | expr

inst_decl_func          ::= ("var" | "const") ident (":" tipo)? "=" expr

inst_decl_tipo          ::= "tipo" ident (inst_decl_var | inst_decl_func)* "fim"

tipo                    ::= "Objeto" | "Int" | "Real" | "Texto" | "Vetor" | ident

inst_decl_func          ::= "funcao" ident "(" (ident ("," ident)*)? ")"

inst_atrib_var          ::= ident "=" expr

inst_se                 ::= "se" expr "entao" instrucao* (senao_se*)? "fim"

senao_se                ::= "senao" "se" expr "entao" instrucao*

inst_enquanto           ::= "enquanto" expr "faca" instrucao* "fim"

expr                    ::= expr_lit | expr_var | expr_chamada | expr_unaria | expr_bin | construir_vetor

expr_lit                ::= INT | DOUBLE | STRING

expr_var                ::= ident

expr_chamada            ::= ident "(" (expr ("," expr)*)? ")"

expr_unaria             ::= (- | !) expr

expr_bin                ::= expr op_bin expr

expr_paren              ::= "(" expr ")"

construir_vetor         ::= ("{" (expr ("," expr)*)? "}") | "[" expr? "]"

bin_op                  ::= "+" | "-" | "*" | "/" | "^" | "%" | "e" | "ou" | ">" | ">=" | "<" | "<=" | "==" | "!="
