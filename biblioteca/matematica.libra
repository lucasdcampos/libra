// Biblioteca padrão da Libra
// Arquivo: matematica.libra
// Libra é distribuída pela Licença MIT, veja https://github.com/lucasdcampos/libra

classe Matematica
    // Constantes matemáticas
    @estatica const PI = 3.141592653589793
    @estatica const E = 2.718281828459045
    @estatica const TAU = 6.283185307179586
    @estatica const RAIZ2 = 1.4142135623730951
    @estatica const RAIZ3 = 1.7320508075688772
    @estatica const LN2 = 0.6931471805599453
    @estatica const LN10 = 2.302585092994046
    @estatica const RAZAO_AUREA = 1.618033988749895

    //@estatica const GRAUS_PARA_RAD = PI / 180
    //@estatica const RAD_PARA_GRAUS = 180.0 / PI

    @estatica const VERDADEIRO = 1
    @estatica const FALSO = 0

    @estatica const SEN_45 = 0.7071067811865476
    @estatica const COS_45 = 0.7071067811865476
    @estatica const SEN_90 = 1.0
    @estatica const COS_90 = 0.0
    @estatica const SEN_30 = 0.5
    @estatica const COS_30 = 0.8660254037844386
    @estatica const SEN_60 = 0.8660254037844386
    @estatica const COS_60 = 0.5

    @estatica const MAX_INT = 2147483646
    @estatica const MIN_INT = -2147483647

    @estatica const BYTE = 8
    @estatica const KB = 1024
    @estatica const MB = 1024 * 1024
    @estatica const GB = 1024 * 1024 * 1024

    funcao Matematica(auto)
        // Ativa o modulo interno de matematica
        __ativarmodulo__("matematica")
    fim

    // Calcula e retorna a raiz enésima de um número
    @estatica
    funcao raiz(auto, numero: Real, indice: Int) -> Real
        retornar __csraiz__(numero, indice)
    fim

    // Calcula e retorna a raiz quadrada de um número
    @estatica
    funcao raizq(auto, x: Real) -> Real
        retornar __csraizq__(x)
    fim

    // Calcula e retorna a o fatorial de um número
    @estatica
    funcao fatorial(auto, n: Int) -> Real
        var resultado = 1
        var contador = n
        enquanto contador > 0 faca
            resultado = resultado * contador
            contador = contador - 1
        fim
        
        retornar resultado
    fim

    // Retorna o valor absoluto (módulo) de um número
    @estatica
    funcao abs(auto, x: Real) -> Real
        se x > 0 entao
            retornar x
        fim

        retornar -x
    fim

    // Retorna o maior valor dentro de um intervalo
    @estatica
    funcao topo(auto, a: Real, b: Real) -> Real
        se a > b entao
            retornar a
        fim

        retornar b
    fim

    // Retorna o menor valor dentro de um intervalo
    @estatica
    funcao chao(auto, a: Real, b: Real) -> Real
        se a < b entao
            retornar a
        fim
        
        retornar b
    fim

    // Retorna o inteiro mais próximo de um valor real
    @estatica
    funcao arrendondar(auto, x: Real) -> Int
        se x > real(int(x)) + 0.5 entao
            retornar int(x+1)
        fim
        retornar int(x)
    fim

    // Retorna a hipotenusa de dois lados
    @estatica
    funcao hipotenusa(auto, a: Real, b: Real) -> Real
        retornar raizq(a*a + b*b)
    fim

    // Retorna o seno de um ângulo x
    @estatica
    funcao sen(auto, x: Real) -> Real
        retornar __cssen__(x)
    fim

    // Retorna o cosseno de um ângulo x
    @estatica
    funcao cos(auto, x: Real) -> Real
        retornar __cscos__(x)
    fim

    // Retorna a tangente de um ângulo x
    @estatica
    funcao tan(auto, x: Real) -> Real
        retornar __cstan__(x)
    fim

    // Retorna o arco-seno de um ângulo x
    @estatica
    funcao arcsen(auto, x: Real) -> Real
        retornar sen(x)^-1
    fim

    // Retorna o arco-cosseno de um ângulo x
    @estatica funcao arccos(auto, x: Real) -> Real
        retornar cos(x)^-1
    fim

    // Retorna a arco-tangente de um ângulo x
    @estatica
    funcao arctan(auto, x: Real) -> Real
        retornar tan(x)^-1
    fim

    // Retorna o logaritmo de x na base n
    @estatica
    funcao log(auto, x: Real, n: Real) -> Real
        retornar __cslog__(x, n)
    fim

    @estatica
    funcao ln(auto, x: Real) -> Real
        retornar log(x, E)
    fim

    @estatica
    funcao log2(auto, x: Real) -> Real
        retornar log(x, 2)
    fim

    @estatica
    funcao exp(auto, x: Real) -> Real
        retornar E^x
    fim

    @estatica
    funcao exp2(auto, x: Real) -> Real
        retornar 2^x
    fim

    @estatica
    funcao aleatorio(auto, min: Real, max: Real) -> Real
        min = real(min)
        max = real(max)

        retornar __csrand__(min, max)
    fim
fim

const Mt = Matematica()